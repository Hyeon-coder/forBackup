so_long 프로젝트 정리

1. 프로젝트 개요

	목표: MiniLibX를 사용하여 간단한 2D 게임 제작

	사용 언어: C

	라이브러리: MiniLibX, libft(사용 가능)

	파일 제출: Makefile, *.c, *.h, maps, textures

	맵 형식: .ber 확장자 파일

2. 필수 구현 사항 (Mandatory Part)

	2.1 게임 기본 규칙

	플레이어는 모든 C(아이템)를 수집한 후 E(출구)로 이동해야 함

	조작 키: WASD 또는 ZQSD, 방향키

	이동 가능 방향: 상하좌우

	벽(1)을 통과할 수 없음

	이동할 때마다 현재 이동 횟수를 터미널에 출력

	2D 보기 (탑다운 또는 측면 시점)

	실시간 게임일 필요 없음 (이벤트 기반 가능)

	2.2 그래픽 관리

	게임 화면을 창(Window)으로 표시

	창 최소화, 다른 창으로 전환 가능해야 함

	ESC 키 누르면 창 닫고 프로그램 종료

	창 닫기 버튼(❌) 눌러도 정상 종료

	MiniLibX의 이미지 기능 필수 사용

	2.3 맵 구조

	.ber 확장자의 맵 파일 사용

	맵 구성 요소

	0 : 빈 공간

	1 : 벽

	C : 수집 아이템

	E : 출구

	P : 플레이어 시작 위치

	맵 조건

	1개의 출구(E), 1개 이상의 아이템(C), 1개의 시작 위치(P)

	직사각형 형태 유지

	벽(1************)로 둘러싸여 있어야 함

	출구까지 도달 가능한 경로가 존재해야 함

	맵 형식이 잘못되었을 경우 오류 출력 후 종료

3. 보너스 구현 사항 (Bonus Part)

	보너스는 필수 기능이 완벽할 때만 평가됨

	적 (Enemy) 추가

	플레이어가 적과 충돌하면 게임 오버

	스프라이트 애니메이션 추가

	움직일 때 캐릭터 스프라이트 변경 효과 추가

	화면 내 이동 횟수 표시

	터미널이 아니라 게임 화면 내에 직접 이동 횟수를 표시

4. 프로젝트 진행 방법

	Step 1: 프로젝트 초기화

	Git 저장소 생성 후 프로젝트 시작

	필수 폴더 및 파일 생성

	Makefile

	so_long.h (헤더 파일)

	main.c (프로그램 진입점)

	map_parser.c (맵 로딩 및 검증)

	render.c (MiniLibX 화면 출력)

	player.c (이동 처리)

	utils.c (보조 함수들)

	textures/ (텍스처 저장 폴더)

	maps/ (맵 파일 저장 폴더)

	Step 2: 맵 로딩 및 검증 구현

	.ber 파일을 읽어 맵을 2D 배열로 변환

	벽(1)로 둘러싸여 있는지 확인

	플레이어, 출구, 아이템이 올바르게 배치되었는지 검증

	출구까지 도달 가능한 경로 존재 여부 확인

	Step 3: MiniLibX로 창 띄우기

	MiniLibX를 사용하여 창 생성

	맵을 화면에 출력 (텍스처 로드)

	키보드 입력 처리 (WASD → 플레이어 이동)

	Step 4: 게임 기능 추가

	벽(1)을 통과하지 않도록 충돌 감지 추가

	아이템(C)을 모두 수집해야 출구(E)로 이동 가능

	이동 시 이동 횟수를 터미널에 출력

	Step 5: 보너스 추가 (선택)

	적 추가 (랜덤으로 움직이는 몬스터)

	애니메이션 추가 (캐릭터 움직일 때 프레임 변화)

	HUD 표시 (이동 횟수를 게임 화면에 표시)

5. 제출 및 평가

	Git 저장소에 모든 코드 업로드

	제출 필수 파일

	Makefile

	*.c, *.h

	maps/ (테스트 맵 포함)

	textures/ (게임 리소스 포함)
