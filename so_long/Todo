✅ 지금까지 한 것 (완료된 작업 목록)
1. 기본적인 프로젝트 구조 설정
Makefile을 작성하여 MiniLibX와 함께 빌드 가능하도록 구성
so_long.h 헤더 파일 정리 및 필요한 함수 선언 추가
2. MiniLibX 윈도우 및 이미지 로딩
mlx_init()을 통해 MiniLibX 초기화
mlx_new_window()를 통해 윈도우 생성
mlx_xpm_file_to_image()을 사용하여 XPM 파일 로드 및 표시
render_map()을 통해 맵을 화면에 출력
3. Norminette 준수 및 코드 정리
render_map()이 25줄을 초과하지 않도록 put_tile(), render_player()로 함수 분리
handle_keypress() 및 handle_exit() 등 주요 함수 정리
4. 게임 로직 구현
read_map()을 통해 .ber 파일의 맵을 읽어들이는 기능 추가
validate_map()을 통해 맵 유효성 검사 추가 (출구, 플레이어, 아이템 체크)
플레이어('P')의 위치를 저장하고 맵을 그릴 때 적용
mlx_hook(game.win, 17, 0, handle_exit, &game);를 추가하여 창 닫기 버튼 정상 작동
5. 키 이벤트 처리 개선
mlx_key_hook()에서 mlx_hook(game.win, 2, 1L << 0, handle_keypress, &game);로 변경하여 모든 키 입력 감지 가능하도록 개선
handle_keypress()에서 WASD 및 방향키 입력을 받아 캐릭터 이동 가능하도록 구현
이동 후 render_map(game); 호출하여 화면이 갱신되도록 처리
6. XPM 파일 수정 및 테스트
기존 192x192 XPM 이미지를 64x64로 변환하여 사용하도록 수정
XPM 색상 정의 오류 (crgb(...) → c #RRGGBB)를 수정하여 MiniLibX에서 정상적으로 표시되도록 변경
convert 명령어 또는 코드 내에서 XPM 이미지를 적절한 크기로 변환하여 사용 가능하게 함
⏳ 앞으로 해야 할 것 (남은 작업 목록)
1. 캐릭터 이동 문제 디버깅
키 입력이 정상적으로 감지되는지 확인 (printf()로 keycode 출력)
handle_keypress()에서 이동 후 game->map[y][x]이 정상적으로 변경되는지 확인
이동이 정상적으로 되었다면 render_map() 호출 후 P가 출력되는지 확인
2. 플레이어 이동 애니메이션 추가
이동할 때 부드러운 애니메이션 효과 추가 (mlx_loop_hook() 사용 가능)
캐릭터가 이동할 때 단순히 순간이동하는 것이 아니라 mlx_put_image_to_window()를 사용하여 점진적으로 이동하는 방식 적용
3. 충돌 처리 및 게임 종료 조건 추가
벽('1')에 부딪히면 이동하지 않도록 예외 처리
아이템('C')을 모두 모았을 때 출구('E')로 이동하면 게임이 종료되도록 구현
게임 종료 메시지 출력 및 exit(0) 처리
4. UI 및 게임 정보 표시
mlx_string_put()을 사용하여 현재 움직인 횟수, 남은 아이템 개수 등을 화면에 표시
더 직관적인 UI를 위해 아이템 카운터를 업데이트하는 기능 추가
5. 창 크기 조절 기능 추가
현재 MiniLibX는 기본적으로 창 크기 조절을 지원하지 않지만, 창이 리사이징될 때 render_map()을 다시 호출하도록 mlx_loop_hook()을 사용하여 처리 가능
6. 메모리 해제 및 안정성 개선
게임이 종료될 때 free_map()을 호출하여 할당된 맵 메모리 해제
MiniLibX의 리소스(mlx_destroy_window(), mlx_destroy_image())를 올바르게 정리하여 메모리 누수를 방지
🚀 진행 우선순위
✅ 1. 캐릭터 이동 문제 해결 (우선 디버깅 필수!)
✅ 2. 게임 종료 조건 추가 (충돌 및 아이템 획득 처리)
✅ 3. UI 개선 (움직인 횟수, 남은 아이템 표시)
✅ 4. 창 크기 조절 기능 개선 (mlx_loop_hook() 활용 가능)
✅ 5. 코드 최적화 및 메모리 해제 (마지막 단계에서 점검)